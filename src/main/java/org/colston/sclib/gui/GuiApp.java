package org.colston.sclib.gui;

import java.awt.BorderLayout;
import java.awt.EventQueue;
import java.awt.Image;
import java.awt.event.WindowListener;
import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.WindowConstants;

public abstract class GuiApp
{
	private JFrame frame;
	private StatusPanel statusPanel;
	private Path configDir;

	public void start()
	{
		
		// create the frame for the splash to cover
		frame = new JFrame(getApplicationName());

		// create and show the splash screen
		Icon icon = getSplashIcon();
		if (icon == null)
		{
			//TODO: make a default
		}
		final Splash splash = new Splash(frame,	icon);
		splash.showSplash();

		//give ourselves minimum time for splash screen
		long startMillis = System.currentTimeMillis();
		try
		{
			configure();
			loadApplicationData();
			createUI();
		}
		catch (Throwable e)
		{
			splash.disposeSplash();
			getLogger().log(Level.SEVERE, "Error initialising app", e);
			System.exit(1);
		}
			
		// show the GUI and get rid of the splash
		EventQueue.invokeLater(() ->
		{
			frame.pack();
			long timeLeft = 3000 - (System.currentTimeMillis() - startMillis);
			if (timeLeft > 0)
			{
				//pause
				try
				{
					Thread.sleep(timeLeft);
				} catch (InterruptedException e) {}
			}
			// end pause
			frame.setLocationRelativeTo(null);
			frame.setVisible(true);
			getFocusComponent().requestFocusInWindow();
			splash.disposeSplash();
		});
	}

	protected abstract void loadApplicationData();

	protected void configure() throws Exception
	{
		configureConfigDir();
		configureLogging();
		configureLookAndFeel();
	}

	protected void configureConfigDir() throws IOException
	{
		configDir = Path.of(System.getProperty("user.home"), getConfigDirName());
		try
		{
			Files.createDirectories(configDir);
		}
		catch (IOException e)
		{
			// no logging available yet so output something
			e.printStackTrace();
			throw e;
		}
	}

	protected abstract String getConfigDirName();
	
	public Path getConfigDir()
	{
		return configDir;
	}
	
	protected void configureLogging() throws Exception
	{
		try
		{
			Path loggingPropertiesFile = getConfigDir().resolve("logging.properties");
			if (Files.notExists(loggingPropertiesFile))
			{
				Properties ps = new Properties();
				ps.setProperty("handlers", "java.util.logging.FileHandler, java.util.logging.ConsoleHandler");
				ps.setProperty(".level", "INFO");
				ps.setProperty("java.util.logging.ConsoleHandler.level", "INFO");
				ps.setProperty("java.util.logging.ConsoleHandler.formatter", "java.util.logging.SimpleFormatter");
				ps.setProperty("java.util.logging.FileHandler.level", "ALL");
				ps.setProperty("java.util.logging.FileHandler.formatter", "java.util.logging.SimpleFormatter");
				ps.setProperty("java.util.logging.FileHandler.limit", "0");
				ps.setProperty("java.util.logging.FileHandler.count", "1");
				ps.setProperty("java.util.logging.FileHandler.pattern", "%h/" + getConfigDirName() + "/log/app.log");
				ps.setProperty("java.util.logging.FileHandler.append", "true");
				
				try (BufferedWriter w = Files.newBufferedWriter(loggingPropertiesFile))
				{
					ps.store(w, "Generated by " + getApplicationName());
				}
				
				//create directory for log files
				Files.createDirectories(getConfigDir().resolve("log"));
			}
			System.setProperty("java.util.logging.config.file", loggingPropertiesFile.toAbsolutePath().toString());
			LogManager.getLogManager().readConfiguration();
		}
		catch (SecurityException | IOException e)
		{
			// no logging available so print something
			e.printStackTrace();
			throw e;
		}
	}
	
	protected void configureLookAndFeel() throws Exception
	{
		final String GTK_LAF = "com.sun.java.swing.plaf.gtk.GTKLookAndFeel";
		String laf = null;
		for (LookAndFeelInfo l : UIManager.getInstalledLookAndFeels())
		{
			if (GTK_LAF.equals(l.getClassName()))
			{
				laf = l.getClassName();
				break;
			}
		}
		laf = laf != null ? laf : UIManager.getCrossPlatformLookAndFeelClassName();
		getLogger().log(Level.INFO, "Using: {0}", laf);
		UIManager.setLookAndFeel(laf);
	}

	protected void createUI()
	{
		frame.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
		frame.addWindowListener(getFrameWindowListener());
		frame.setIconImages(getFrameIconImages());
		
		statusPanel = new StatusPanel();

		frame.setJMenuBar(createMenuBar());
		JPanel contentPane = new JPanel(new BorderLayout());
		frame.setContentPane(contentPane);
		contentPane.add(createToolBar(), BorderLayout.NORTH);
		contentPane.add(createMainPanel(), BorderLayout.CENTER);
		contentPane.add(statusPanel, BorderLayout.SOUTH);
		statusPanel.setMessage(getApplicationName());
	}

	protected abstract Logger getLogger();
	
	protected abstract List<? extends Image> getFrameIconImages();

	protected abstract WindowListener getFrameWindowListener();
	
	protected abstract JComponent getFocusComponent();

	protected abstract JComponent createMainPanel();

	protected abstract JToolBar createToolBar();

	protected abstract JMenuBar createMenuBar();

	protected abstract Icon getSplashIcon();

	protected abstract String getApplicationName();
	
	public JFrame getFrame()
	{
		return frame;
	}
}
